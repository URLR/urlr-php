<?php
/**
 * LinksApi
 * PHP version 8.1
 *
 * @package  URLR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * URLR API Reference
 *
 * API powering the features of URLR.<br><br>Note that in order to facilitate integration, we provide SDKs for various languages at https://github.com/URLR.<br><br>Key API principles:<br>         <ul><li>All dates follow **ISO-8601** format</li><li>Most errors follow **RFC 9457** standard</li><li>All responses are delivered in English</li></ul>
 *
 * The version of the OpenAPI document: 1.10
 * Contact: contact@urlr.me
 * @generated Generated by: https://openapi-generator.tech
 * Generator version: 7.14.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace URLR\Api;

use InvalidArgumentException;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use GuzzleHttp\Promise\PromiseInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Http\Message\ResponseInterface;
use URLR\ApiException;
use URLR\Configuration;
use URLR\HeaderSelector;
use URLR\FormDataProcessor;
use URLR\ObjectSerializer;

/**
 * LinksApi Class Doc Comment
 *
 * @package  URLR
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LinksApi
{
    /**
     * @var ClientInterface
     */
    protected ClientInterface $client;

    /**
     * @var Configuration
     */
    protected Configuration $config;

    /**
     * @var HeaderSelector
     */
    protected HeaderSelector $headerSelector;

    /**
     * @var int Host index
     */
    protected int $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createLink' => [
            'application/json',
        ],
        'editLink' => [
            'application/json',
        ],
        'getLink' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface|null $client
     * @param Configuration|null   $config
     * @param HeaderSelector|null  $selector
     * @param int                  $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex(int $hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex(): int
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig(): Configuration
    {
        return $this->config;
    }

    /**
     * Operation createLink
     *
     * Create a link
     *
     * @param  \URLR\Model\LinkCreateRequest|null $linkCreateRequest Info of the link to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLink'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \URLR\Model\GetLink200Response|\URLR\Model\GetLink401Response|\URLR\Model\GetLink422Response|\URLR\Model\CreateLink429Response|\URLR\Model\EditLink500Response
     */
    public function createLink(
        ?\URLR\Model\LinkCreateRequest $linkCreateRequest = null,
        string $contentType = self::contentTypes['createLink'][0]
    ): \URLR\Model\GetLink200Response|\URLR\Model\GetLink401Response|\URLR\Model\GetLink422Response|\URLR\Model\CreateLink429Response|\URLR\Model\EditLink500Response
    {
        list($response) = $this->createLinkWithHttpInfo($linkCreateRequest, $contentType);
        return $response;
    }

    /**
     * Operation createLinkWithHttpInfo
     *
     * Create a link
     *
     * @param  \URLR\Model\LinkCreateRequest|null $linkCreateRequest Info of the link to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLink'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \URLR\Model\GetLink200Response|\URLR\Model\GetLink401Response|\URLR\Model\GetLink422Response|\URLR\Model\CreateLink429Response|\URLR\Model\EditLink500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function createLinkWithHttpInfo(
        ?\URLR\Model\LinkCreateRequest $linkCreateRequest = null,
        string $contentType = self::contentTypes['createLink'][0]
    ): array
    {
        $request = $this->createLinkRequest($linkCreateRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 201:
                    return $this->handleResponseWithDataType(
                        '\URLR\Model\GetLink200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\URLR\Model\GetLink401Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\URLR\Model\GetLink422Response',
                        $request,
                        $response,
                    );
                case 429:
                    return $this->handleResponseWithDataType(
                        '\URLR\Model\CreateLink429Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\URLR\Model\EditLink500Response',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\URLR\Model\GetLink200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\URLR\Model\GetLink200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\URLR\Model\GetLink401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\URLR\Model\GetLink422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\URLR\Model\CreateLink429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\URLR\Model\EditLink500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation createLinkAsync
     *
     * Create a link
     *
     * @param  \URLR\Model\LinkCreateRequest|null $linkCreateRequest Info of the link to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLink'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createLinkAsync(
        ?\URLR\Model\LinkCreateRequest $linkCreateRequest = null,
        string $contentType = self::contentTypes['createLink'][0]
    ): PromiseInterface
    {
        return $this->createLinkAsyncWithHttpInfo($linkCreateRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createLinkAsyncWithHttpInfo
     *
     * Create a link
     *
     * @param  \URLR\Model\LinkCreateRequest|null $linkCreateRequest Info of the link to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLink'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function createLinkAsyncWithHttpInfo(
        ?\URLR\Model\LinkCreateRequest $linkCreateRequest = null,
        string $contentType = self::contentTypes['createLink'][0]
    ): PromiseInterface
    {
        $returnType = '\URLR\Model\GetLink200Response';
        $request = $this->createLinkRequest($linkCreateRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createLink'
     *
     * @param  \URLR\Model\LinkCreateRequest|null $linkCreateRequest Info of the link to create (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createLink'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createLinkRequest(
        ?\URLR\Model\LinkCreateRequest $linkCreateRequest = null,
        string $contentType = self::contentTypes['createLink'][0]
    ): Request
    {



        $resourcePath = '/links/create';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($linkCreateRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($linkCreateRequest));
            } else {
                $httpBody = $linkCreateRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editLink
     *
     * Edit a link
     *
     * @param  string $linkId Link API ID (required)
     * @param  \URLR\Model\LinkEditRequest|null $linkEditRequest Info of the link to edit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editLink'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \URLR\Model\GetLink200Response|\URLR\Model\GetLink401Response|\URLR\Model\GetLink422Response|\URLR\Model\EditLink500Response
     */
    public function editLink(
        string $linkId,
        ?\URLR\Model\LinkEditRequest $linkEditRequest = null,
        string $contentType = self::contentTypes['editLink'][0]
    ): \URLR\Model\GetLink200Response|\URLR\Model\GetLink401Response|\URLR\Model\GetLink422Response|\URLR\Model\EditLink500Response
    {
        list($response) = $this->editLinkWithHttpInfo($linkId, $linkEditRequest, $contentType);
        return $response;
    }

    /**
     * Operation editLinkWithHttpInfo
     *
     * Edit a link
     *
     * @param  string $linkId Link API ID (required)
     * @param  \URLR\Model\LinkEditRequest|null $linkEditRequest Info of the link to edit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editLink'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \URLR\Model\GetLink200Response|\URLR\Model\GetLink401Response|\URLR\Model\GetLink422Response|\URLR\Model\EditLink500Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function editLinkWithHttpInfo(
        string $linkId,
        ?\URLR\Model\LinkEditRequest $linkEditRequest = null,
        string $contentType = self::contentTypes['editLink'][0]
    ): array
    {
        $request = $this->editLinkRequest($linkId, $linkEditRequest, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\URLR\Model\GetLink200Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\URLR\Model\GetLink401Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\URLR\Model\GetLink422Response',
                        $request,
                        $response,
                    );
                case 500:
                    return $this->handleResponseWithDataType(
                        '\URLR\Model\EditLink500Response',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\URLR\Model\GetLink200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\URLR\Model\GetLink200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\URLR\Model\GetLink401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\URLR\Model\GetLink422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\URLR\Model\EditLink500Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation editLinkAsync
     *
     * Edit a link
     *
     * @param  string $linkId Link API ID (required)
     * @param  \URLR\Model\LinkEditRequest|null $linkEditRequest Info of the link to edit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editLink'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function editLinkAsync(
        string $linkId,
        ?\URLR\Model\LinkEditRequest $linkEditRequest = null,
        string $contentType = self::contentTypes['editLink'][0]
    ): PromiseInterface
    {
        return $this->editLinkAsyncWithHttpInfo($linkId, $linkEditRequest, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editLinkAsyncWithHttpInfo
     *
     * Edit a link
     *
     * @param  string $linkId Link API ID (required)
     * @param  \URLR\Model\LinkEditRequest|null $linkEditRequest Info of the link to edit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editLink'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function editLinkAsyncWithHttpInfo(
        string $linkId,
        ?\URLR\Model\LinkEditRequest $linkEditRequest = null,
        string $contentType = self::contentTypes['editLink'][0]
    ): PromiseInterface
    {
        $returnType = '\URLR\Model\GetLink200Response';
        $request = $this->editLinkRequest($linkId, $linkEditRequest, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editLink'
     *
     * @param  string $linkId Link API ID (required)
     * @param  \URLR\Model\LinkEditRequest|null $linkEditRequest Info of the link to edit (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['editLink'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function editLinkRequest(
        string $linkId,
        ?\URLR\Model\LinkEditRequest $linkEditRequest = null,
        string $contentType = self::contentTypes['editLink'][0]
    ): Request
    {

        // verify the required parameter 'linkId' is set
        if ($linkId === null || (is_array($linkId) && count($linkId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $linkId when calling editLink'
            );
        }



        $resourcePath = '/links/{link_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($linkId !== null) {
            $resourcePath = str_replace(
                '{' . 'link_id' . '}',
                ObjectSerializer::toPathValue($linkId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($linkEditRequest)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($linkEditRequest));
            } else {
                $httpBody = $linkEditRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getLink
     *
     * Get a link
     *
     * @param  string $linkId Link API ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLink'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return \URLR\Model\GetLink200Response|\URLR\Model\GetLink404Response|\URLR\Model\GetLink401Response|\URLR\Model\GetLink422Response
     */
    public function getLink(
        string $linkId,
        string $contentType = self::contentTypes['getLink'][0]
    ): \URLR\Model\GetLink200Response|\URLR\Model\GetLink404Response|\URLR\Model\GetLink401Response|\URLR\Model\GetLink422Response
    {
        list($response) = $this->getLinkWithHttpInfo($linkId, $contentType);
        return $response;
    }

    /**
     * Operation getLinkWithHttpInfo
     *
     * Get a link
     *
     * @param  string $linkId Link API ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLink'] to see the possible values for this operation
     *
     * @throws ApiException on non-2xx response or if the response body is not in the expected format
     * @throws InvalidArgumentException
     * @return array of \URLR\Model\GetLink200Response|\URLR\Model\GetLink404Response|\URLR\Model\GetLink401Response|\URLR\Model\GetLink422Response, HTTP status code, HTTP response headers (array of strings)
     */
    public function getLinkWithHttpInfo(
        string $linkId,
        string $contentType = self::contentTypes['getLink'][0]
    ): array
    {
        $request = $this->getLinkRequest($linkId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            switch($statusCode) {
                case 200:
                    return $this->handleResponseWithDataType(
                        '\URLR\Model\GetLink200Response',
                        $request,
                        $response,
                    );
                case 404:
                    return $this->handleResponseWithDataType(
                        '\URLR\Model\GetLink404Response',
                        $request,
                        $response,
                    );
                case 401:
                    return $this->handleResponseWithDataType(
                        '\URLR\Model\GetLink401Response',
                        $request,
                        $response,
                    );
                case 422:
                    return $this->handleResponseWithDataType(
                        '\URLR\Model\GetLink422Response',
                        $request,
                        $response,
                    );
            }
            

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return $this->handleResponseWithDataType(
                '\URLR\Model\GetLink200Response',
                $request,
                $response,
            );
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\URLR\Model\GetLink200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\URLR\Model\GetLink404Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\URLR\Model\GetLink401Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\URLR\Model\GetLink422Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    throw $e;
            }
        
            throw $e;
        }
    }

    /**
     * Operation getLinkAsync
     *
     * Get a link
     *
     * @param  string $linkId Link API ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLink'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLinkAsync(
        string $linkId,
        string $contentType = self::contentTypes['getLink'][0]
    ): PromiseInterface
    {
        return $this->getLinkAsyncWithHttpInfo($linkId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getLinkAsyncWithHttpInfo
     *
     * Get a link
     *
     * @param  string $linkId Link API ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLink'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return PromiseInterface
     */
    public function getLinkAsyncWithHttpInfo(
        string $linkId,
        string $contentType = self::contentTypes['getLink'][0]
    ): PromiseInterface
    {
        $returnType = '\URLR\Model\GetLink200Response';
        $request = $this->getLinkRequest($linkId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if (in_array($returnType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getLink'
     *
     * @param  string $linkId Link API ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getLink'] to see the possible values for this operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getLinkRequest(
        string $linkId,
        string $contentType = self::contentTypes['getLink'][0]
    ): Request
    {

        // verify the required parameter 'linkId' is set
        if ($linkId === null || (is_array($linkId) && count($linkId) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $linkId when calling getLink'
            );
        }


        $resourcePath = '/links/{link_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($linkId !== null) {
            $resourcePath = str_replace(
                '{' . 'link_id' . '}',
                ObjectSerializer::toPathValue($linkId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', 'application/problem+json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption(): array
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    private function handleResponseWithDataType(
        string $dataType,
        RequestInterface $request,
        ResponseInterface $response,
    ): array {
        if (in_array($dataType, ['\SplFileObject', '\Psr\Http\Message\StreamInterface'])) {
            $content = $response->getBody(); //stream goes to serializer
        } else {
            $content = (string) $response->getBody();
            if ($dataType !== 'string') {
                try {
                    $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                } catch (\JsonException $exception) {
                    throw new ApiException(
                        sprintf(
                            'Error JSON decoding server response (%s)',
                            $request->getUri()
                        ),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                        $content
                    );
                }
            }
        }

        return [
            ObjectSerializer::deserialize($content, $dataType, []),
            $response->getStatusCode(),
            $response->getHeaders()
        ];
    }

    private function responseWithinRangeCode(
        string $rangeCode,
        int $statusCode,
    ): bool {
        $left = (int) ($rangeCode[0].'00');
        $right = (int) ($rangeCode[0].'99');

        return $statusCode >= $left && $statusCode <= $right;
    }
}
